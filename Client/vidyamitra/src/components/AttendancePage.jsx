import React, { useState, useEffect, useCallback } from 'react';
import { apiService, AttendanceStatus } from '../services/apiService';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const AttendancePage = () => {
  const [students, setStudents] = useState([]);
  const [classes, setClasses] = useState([]);
  const [selectedClass, setSelectedClass] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [attendanceRate, setAttendanceRate] = useState(0);
  const [attendanceData, setAttendanceData] = useState({});
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  const [classAttendanceHistory, setClassAttendanceHistory] = useState([]);
  const [historyLoading, setHistoryLoading] = useState(false);
  const [localAttendance, setLocalAttendance] = useState({});
  const [generatingReport, setGeneratingReport] = useState(false);

  const token = localStorage.getItem('token');

  // Format class name from grade and section
  const formatClassName = (cls) => {
    return `${cls.grade} ${cls.section}`;
  };

  // âœ… FIX: Get date string without timezone issues
  const getDateString = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  };

  // Generate PDF Report
  const generateReport = async () => {
    try {
      setGeneratingReport(true);
      
      const selectedClassName = classes.find(c => c.id == selectedClass) ? 
        formatClassName(classes.find(c => c.id == selectedClass)) : 'All Classes';
      
      // Create PDF instance
      const doc = new jsPDF();
      
      // Add header with logo and title
      doc.setFillColor(59, 130, 246); // Blue color
      doc.rect(0, 0, 210, 40, 'F');
      
      // School logo and title
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('VidyaMitra Academy', 105, 15, { align: 'center' });
      
      doc.setFontSize(14);
      doc.setFont('helvetica', 'normal');
      doc.text('Attendance Report', 105, 25, { align: 'center' });
      
      // Report details
      doc.setTextColor(0, 0, 0);
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(`Class: ${selectedClassName}`, 15, 50);
      doc.text(`Report Date: ${new Date().toLocaleDateString()}`, 15, 55);
      doc.text(`Generated By: Teacher`, 15, 60);
      
      // Attendance summary
      const dateKey = getDateString(selectedDate);
      const savedAttendance = attendanceData[dateKey] || {};
      const localChanges = localAttendance[dateKey] || {};
      const combinedAttendance = { ...savedAttendance, ...localChanges };
      
      const presentCount = Object.values(combinedAttendance).filter(status => status === 'present').length;
      const lateCount = Object.values(combinedAttendance).filter(status => status === 'late').length;
      const absentCount = Object.values(combinedAttendance).filter(status => status === 'absent').length;
      const totalStudents = students.length;
      
      doc.text(`Attendance Date: ${selectedDate.toLocaleDateString()}`, 150, 50);
      doc.text(`Present: ${presentCount}`, 150, 55);
      doc.text(`Late: ${lateCount}`, 150, 60);
      doc.text(`Absent: ${absentCount}`, 150, 65);
      doc.text(`Total Students: ${totalStudents}`, 150, 70);
      
      // Calculate attendance percentage
      const attendancePercentage = totalStudents > 0 ? ((presentCount / totalStudents) * 100).toFixed(1) : 0;
      doc.text(`Attendance Rate: ${attendancePercentage}%`, 150, 75);
      
      // Prepare table data
      const tableData = students.map((student, index) => {
        const status = getStudentStatus(student.id);
        const statusColor = {
          'present': '#10B981',
          'late': '#F59E0B',
          'absent': '#EF4444'
        }[status] || '#6B7280';
        
        return [
          index + 1,
          student.roll,
          student.name,
          { 
            content: status.toUpperCase(),
            styles: { 
              textColor: status === 'present' ? [16, 185, 129] : 
                        status === 'late' ? [245, 158, 11] : 
                        [239, 68, 68]
            }
          },
          student.time
        ];
      });
      
      // Add table
      doc.autoTable({
        startY: 85,
        head: [['#', 'Roll No', 'Student Name', 'Status', 'Time']],
        body: tableData,
        theme: 'grid',
        headStyles: {
          fillColor: [59, 130, 246],
          textColor: 255,
          fontStyle: 'bold'
        },
        alternateRowStyles: {
          fillColor: [240, 240, 240]
        },
        styles: {
          fontSize: 9,
          cellPadding: 3,
        },
        columnStyles: {
          0: { cellWidth: 15 }, // #
          1: { cellWidth: 25 }, // Roll No
          2: { cellWidth: 70 }, // Name
          3: { cellWidth: 25 }, // Status
          4: { cellWidth: 25 }  // Time
        },
        didDrawPage: function (data) {
          // Footer
          doc.setFontSize(8);
          doc.setTextColor(100);
          doc.text(
            `Generated by VidyaMitra Attendance System - Page ${doc.internal.getNumberOfPages()}`,
            data.settings.margin.left,
            doc.internal.pageSize.height - 10
          );
        }
      });
      
      // Add summary section
      const finalY = doc.lastAutoTable.finalY + 10;
      
      if (finalY > 250) {
        doc.addPage();
      }
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text('Attendance Summary', 15, finalY);
      
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(`Total Students: ${totalStudents}`, 15, finalY + 10);
      doc.text(`Present: ${presentCount} (${((presentCount / totalStudents) * 100).toFixed(1)}%)`, 15, finalY + 15);
      doc.text(`Late: ${lateCount} (${((lateCount / totalStudents) * 100).toFixed(1)}%)`, 15, finalY + 20);
      doc.text(`Absent: ${absentCount} (${((absentCount / totalStudents) * 100).toFixed(1)}%)`, 15, finalY + 25);
      
      // Add attendance statistics chart (simple text-based)
      doc.text(`Overall Attendance Rate: ${attendancePercentage}%`, 15, finalY + 35);
      
      // Signature section
      const signatureY = finalY + 50;
      doc.text('_________________________', 15, signatureY);
      doc.text('Teacher Signature', 15, signatureY + 5);
      
      doc.text('_________________________', 120, signatureY);
      doc.text('Principal Signature', 120, signatureY + 5);
      
      // Save the PDF
      const fileName = `Attendance_Report_${selectedClassName.replace(' ', '_')}_${getDateString(selectedDate)}.pdf`;
      doc.save(fileName);
      
    } catch (error) {
      console.error('Error generating report:', error);
      alert('Failed to generate report');
    } finally {
      setGeneratingReport(false);
    }
  };

  // Generate Detailed Report for Date Range
  const generateDetailedReport = async () => {
    try {
      setGeneratingReport(true);
      
      const selectedClassName = classes.find(c => c.id == selectedClass) ? 
        formatClassName(classes.find(c => c.id == selectedClass)) : 'All Classes';
      
      // Get last 7 days data
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(endDate.getDate() - 7);
      
      const dateRange = [];
      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
        dateRange.push(new Date(d));
      }
      
      // Fetch attendance for date range
      const reportPromises = dateRange.map(date => {
        const dateString = getDateString(date);
        return apiService.getAttendanceByDate(dateString, token)
          .then(data => ({ date: dateString, data }))
          .catch(() => ({ date: dateString, data: [] }));
      });
      
      const reportData = await Promise.all(reportPromises);
      
      // Create PDF
      const doc = new jsPDF();
      
      // Header
      doc.setFillColor(59, 130, 246);
      doc.rect(0, 0, 210, 40, 'F');
      
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('VidyaMitra Academy', 105, 15, { align: 'center' });
      
      doc.setFontSize(14);
      doc.setFont('helvetica', 'normal');
      doc.text('Detailed Attendance Report', 105, 25, { align: 'center' });
      
      // Report details
      doc.setTextColor(0, 0, 0);
      doc.setFontSize(10);
      doc.text(`Class: ${selectedClassName}`, 15, 50);
      doc.text(`Report Period: ${startDate.toLocaleDateString()} to ${endDate.toLocaleDateString()}`, 15, 55);
      doc.text(`Generated: ${new Date().toLocaleDateString()}`, 15, 60);
      
      let startY = 70;
      
      // Create summary table for each date
      reportData.forEach(({ date, data }, index) => {
        if (startY > 250) {
          doc.addPage();
          startY = 20;
        }
        
        const presentCount = data.filter(record => record.status === 'PRESENT').length;
        const lateCount = data.filter(record => record.status === 'LATE').length;
        const absentCount = data.filter(record => record.status === 'ABSENT').length;
        const total = presentCount + lateCount + absentCount;
        
        doc.autoTable({
          startY: startY,
          head: [[`Date: ${new Date(date).toLocaleDateString()} (Total: ${total})`]],
          body: [
            [`Present: ${presentCount} (${total > 0 ? ((presentCount / total) * 100).toFixed(1) : 0}%)`],
            [`Late: ${lateCount} (${total > 0 ? ((lateCount / total) * 100).toFixed(1) : 0}%)`],
            [`Absent: ${absentCount} (${total > 0 ? ((absentCount / total) * 100).toFixed(1) : 0}%)`]
          ],
          theme: 'grid',
          headStyles: {
            fillColor: [75, 85, 99],
            textColor: 255,
            fontStyle: 'bold'
          },
          styles: {
            fontSize: 9,
            cellPadding: 3
          }
        });
        
        startY = doc.lastAutoTable.finalY + 5;
      });
      
      // Save detailed report
      const fileName = `Detailed_Attendance_Report_${selectedClassName.replace(' ', '_')}_${getDateString(startDate)}_to_${getDateString(endDate)}.pdf`;
      doc.save(fileName);
      
    } catch (error) {
      console.error('Error generating detailed report:', error);
      alert('Failed to generate detailed report');
    } finally {
      setGeneratingReport(false);
    }
  };

  // Fetch classes and students on component mount
  useEffect(() => {
    fetchClasses();
  }, []);

  useEffect(() => {
    if (classes.length > 0 && selectedClass) {
      fetchStudents();
    }
  }, [selectedClass, classes]);

  useEffect(() => {
    if (students.length > 0) {
      fetchAttendanceForDate();
      calculateAttendanceRate();
    }
  }, [selectedDate, students.length]);

  const fetchClasses = async () => {
    try {
      const classesData = await apiService.getAllClasses(token);
      setClasses(classesData);
      if (classesData.length > 0 && !selectedClass) {
        setSelectedClass(classesData[0].id);
      }
    } catch (error) {
      console.error('Error fetching classes:', error);
      alert('Failed to load classes');
    }
  };

  const fetchStudents = async () => {
    try {
      setLoading(true);
      const studentsData = await apiService.getAllStudents(token, selectedClass || null);
      const transformedStudents = studentsData.map(student => ({
        id: student.id,
        name: `${student.firstName} ${student.lastName}`,
        roll: student.rollNumber,
        time: '08:45',
        status: 'present'
      }));
      setStudents(transformedStudents);
      setLocalAttendance({});
    } catch (error) {
      console.error('Error fetching students:', error);
      alert('Failed to load students');
    } finally {
      setLoading(false);
    }
  };

  const fetchAttendanceForDate = useCallback(async () => {
    try {
      const dateString = getDateString(selectedDate);
      
      console.log('Fetching attendance for date:', dateString);
      const attendanceResponse = await apiService.getAttendanceByDate(dateString, token);
      
      const transformedData = {};
      attendanceResponse.forEach(record => {
        const dateKey = record.attendanceDate;
        if (!transformedData[dateKey]) {
          transformedData[dateKey] = {};
        }
        transformedData[dateKey][record.studentId] = record.status.toLowerCase();
      });
      
      setAttendanceData(prev => ({ ...prev, ...transformedData }));
      updateStudentStatusesFromAttendance(transformedData);
    } catch (error) {
      console.error('Error fetching attendance:', error);
      if (!error.message.includes('404') && !error.message.includes('Failed to fetch')) {
        alert('Failed to load attendance data');
      }
    }
  }, [selectedDate, token]);

  const updateStudentStatusesFromAttendance = (attendanceData) => {
    const dateKey = getDateString(selectedDate);
    const todayAttendance = attendanceData[dateKey];
    
    if (todayAttendance) {
      setStudents(prevStudents => 
        prevStudents.map(student => ({
          ...student,
          status: todayAttendance[student.id] || 'present'
        }))
      );
    }
  };

  const calculateAttendanceRate = () => {
    const dateKey = getDateString(selectedDate);
    
    const savedAttendance = attendanceData[dateKey] || {};
    const localChanges = localAttendance[dateKey] || {};
    const combinedAttendance = { ...savedAttendance, ...localChanges };
    
    if (Object.keys(combinedAttendance).length === 0) {
      setAttendanceRate(100);
      return;
    }
    
    const presentCount = Object.values(combinedAttendance).filter(
      status => status === 'present'
    ).length;
    const totalCount = Object.keys(combinedAttendance).length;
    
    const rate = totalCount > 0 ? Math.round((presentCount / totalCount) * 100) : 100;
    setAttendanceRate(rate);
  };

  // Update local attendance
  const updateAttendance = (studentId, status) => {
    const dateKey = getDateString(selectedDate);
    
    setLocalAttendance(prev => ({
      ...prev,
      [dateKey]: {
        ...prev[dateKey],
        [studentId]: status
      }
    }));

    setStudents(students.map(student =>
      student.id === studentId ? { ...student, status } : student
    ));

    calculateAttendanceRate();
  };

  // Submit all attendance for the current date
  const submitAttendance = async () => {
    try {
      setSaving(true);
      const dateKey = getDateString(selectedDate);
      
      const currentStatuses = {};
      students.forEach(student => {
        currentStatuses[student.id] = student.status;
      });

      console.log('Submitting attendance for date:', dateKey);
      console.log('Student statuses:', currentStatuses);

      const promises = Object.entries(currentStatuses).map(([studentId, status]) =>
        apiService.markAttendance({
          studentId: parseInt(studentId),
          attendanceDate: dateKey,
          status: status.toUpperCase()
        }, token)
      );
      
      await Promise.all(promises);
      
      setAttendanceData(prev => ({
        ...prev,
        [dateKey]: currentStatuses
      }));

      setLocalAttendance(prev => ({
        ...prev,
        [dateKey]: undefined
      }));

      alert(`Attendance submitted successfully for ${selectedDate.toLocaleDateString()}!`);
      
    } catch (error) {
      console.error('Error submitting attendance:', error);
      alert('Failed to submit attendance');
    } finally {
      setSaving(false);
    }
  };

  // Mark all present for selected date
  const markAllPresent = () => {
    const dateKey = getDateString(selectedDate);
    
    const newAttendance = {};
    students.forEach(student => {
      newAttendance[student.id] = 'present';
    });

    setLocalAttendance(prev => ({
      ...prev,
      [dateKey]: newAttendance
    }));

    setStudents(students.map(student => ({ ...student, status: 'present' })));
    setAttendanceRate(100);
  };

  // View attendance history for the class
  const viewAttendanceHistory = async () => {
    try {
      setHistoryLoading(true);
      setShowHistory(true);
      
      const endDate = new Date();
      const startDate = new Date();
      startDate.setDate(endDate.getDate() - 7);
      
      const dateRange = [];
      for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
        dateRange.push(new Date(d));
      }
      
      const historyPromises = dateRange.map(date => {
        const dateString = getDateString(date);
        return apiService.getAttendanceByDate(dateString, token)
          .then(data => ({ date: dateString, data }))
          .catch(error => {
            console.error(`Error fetching attendance for ${dateString}:`, error);
            return { date: dateString, data: [] };
          });
      });
      
      const historyResults = await Promise.all(historyPromises);
      
      const studentNameMap = {};
      students.forEach(student => {
        studentNameMap[student.id] = student.name;
      });
      
      const enhancedHistory = historyResults.map(({ date, data }) => ({
        date,
        data: data.map(record => ({
          ...record,
          studentName: studentNameMap[record.studentId] || `Student ${record.studentId}`
        }))
      }));
      
      setClassAttendanceHistory(enhancedHistory);
      
    } catch (error) {
      console.error('Error fetching attendance history:', error);
      alert('Failed to load attendance history');
    } finally {
      setHistoryLoading(false);
    }
  };

  // Get status for a student on selected date
  const getStudentStatus = (studentId) => {
    const dateKey = getDateString(selectedDate);
    
    return localAttendance[dateKey]?.[studentId] || 
           attendanceData[dateKey]?.[studentId] || 
           'present';
  };

  // Calendar navigation
  const navigateMonth = (direction) => {
    setCurrentMonth(prev => {
      const newDate = new Date(prev);
      newDate.setMonth(prev.getMonth() + direction);
      return newDate;
    });
  };

  // Handle date selection
  const handleDateSelect = (date) => {
    setSelectedDate(date);
    const dateKey = getDateString(date);
    setLocalAttendance(prev => ({
      ...prev,
      [dateKey]: undefined
    }));
  };

  // Get calendar days for current month
  const getCalendarDays = () => {
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();
    
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    
    const startingDay = firstDay.getDay();
    
    const days = [];
    
    // Previous month's days
    const prevMonthLastDay = new Date(year, month, 0).getDate();
    for (let i = startingDay - 1; i >= 0; i--) {
      days.push({
        date: new Date(year, month - 1, prevMonthLastDay - i),
        isCurrentMonth: false,
        isToday: false
      });
    }
    
    // Current month's days
    const today = new Date();
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month, day);
      days.push({
        date,
        isCurrentMonth: true,
        isToday: date.toDateString() === today.toDateString()
      });
    }
    
    // Next month's days
    const totalCells = 42;
    let nextMonthDay = 1;
    while (days.length < totalCells) {
      days.push({
        date: new Date(year, month + 1, nextMonthDay),
        isCurrentMonth: false,
        isToday: false
      });
      nextMonthDay++;
    }
    
    return days;
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'present': return 'bg-green-100 text-green-800 border-green-300';
      case 'late': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'absent': return 'bg-red-100 text-red-800 border-red-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getStatusButtonColor = (currentStatus, buttonStatus) => {
    if (currentStatus === buttonStatus) {
      switch (buttonStatus) {
        case 'present': return 'bg-green-600 text-white border-green-600';
        case 'late': return 'bg-yellow-600 text-white border-yellow-600';
        case 'absent': return 'bg-red-600 text-white border-red-600';
        default: return 'bg-blue-600 text-white border-blue-600';
      }
    }
    return 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50';
  };

  // Filter students based on search
  const filteredStudents = students.filter(student =>
    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    student.roll.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Calculate present count for selected date
  const presentCount = students.filter(student => getStudentStatus(student.id) === 'present').length;

  const formatDate = (date) => {
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Get attendance status for calendar day
  const getDayAttendanceStatus = (date) => {
    const dateKey = getDateString(date);
    
    const savedAttendance = attendanceData[dateKey] || {};
    const localChanges = localAttendance[dateKey] || {};
    
    const combinedAttendance = { ...savedAttendance, ...localChanges };
    
    if (Object.keys(combinedAttendance).length === 0) return null;
    
    const presentCount = Object.values(combinedAttendance).filter(status => status === 'present').length;
    const totalCount = Object.values(combinedAttendance).length;
    
    if (presentCount === totalCount) return 'all-present';
    if (presentCount === 0) return 'all-absent';
    return 'partial';
  };

  const calendarDays = getCalendarDays();

  // Check if there are unsaved changes
  const hasUnsavedChanges = () => {
    const dateKey = getDateString(selectedDate);
    return localAttendance[dateKey] && Object.keys(localAttendance[dateKey]).length > 0;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center">
        <div className="text-blue-800 text-xl">Loading attendance data...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-6 transform transition-all duration-300 hover:shadow-xl">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            <div>
              <h1 className="text-3xl font-bold text-blue-800 mb-2">Attendance Management</h1>
              <p className="text-blue-600">Mark and track daily student attendance</p>
            </div>
            
            {/* Action Buttons */}
            <div className="flex items-center gap-3">
              <button
                onClick={viewAttendanceHistory}
                className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transform transition-all duration-300 hover:scale-105 font-medium"
              >
                <span>ðŸ“Š</span>
                View History
              </button>
              <button
                onClick={submitAttendance}
                disabled={saving || students.length === 0 || !hasUnsavedChanges()}
                className="flex items-center gap-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transform transition-all duration-300 hover:scale-105 font-medium disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <span>ðŸ’¾</span>
                {saving ? 'Saving...' : `Submit Attendance${hasUnsavedChanges() ? ' *' : ''}`}
              </button>
            </div>
          </div>
          
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mt-4">
            <div className="bg-blue-100 px-4 py-2 rounded-lg border border-blue-200 transition-all duration-300 hover:bg-blue-200">
              <span className="text-blue-800 font-semibold text-lg">Present {presentCount}</span>
              {hasUnsavedChanges() && (
                <span className="ml-2 text-yellow-600 text-sm">â€¢ Unsaved changes</span>
              )}
            </div>
            
            {/* Class Selector */}
            <div className="flex items-center gap-4">
              <select
                value={selectedClass}
                onChange={(e) => setSelectedClass(e.target.value)}
                className="px-4 py-2 border border-blue-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
              >
                {classes.map(cls => (
                  <option key={cls.id} value={cls.id}>
                    {formatClassName(cls)}
                  </option>
                ))}
              </select>
              
              <div className="text-sm text-blue-600">
                Total Students: {students.length} | Date: {selectedDate.toLocaleDateString()}
                {saving && <span className="ml-2 text-yellow-600">Saving...</span>}
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Column - Mark Attendance */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-lg p-6 mb-6 transform transition-all duration-300">
              <h2 className="text-xl font-semibold text-blue-800 mb-4">Mark Attendance</h2>
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200 mb-6 transition-all duration-300">
                <p className="text-blue-700 font-medium">{formatDate(selectedDate)}</p>
              </div>

              {/* Search */}
              <div className="mb-6">
                <input
                  type="text"
                  placeholder="Search students..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full px-4 py-3 border border-blue-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
                />
              </div>

              {/* Student List */}
              <div className="space-y-4">
                {filteredStudents.length === 0 ? (
                  <div className="text-center py-8 text-blue-600">
                    No students found{searchTerm && ` for "${searchTerm}"`}
                  </div>
                ) : (
                  filteredStudents.map((student) => {
                    const currentStatus = getStudentStatus(student.id);
                    return (
                      <div
                        key={student.id}
                        className="bg-white border border-blue-100 rounded-lg p-4 hover:shadow-md transition-all duration-300 transform hover:-translate-y-1"
                      >
                        <div className="flex items-center justify-between mb-3">
                          <div>
                            <h3 className="font-semibold text-blue-900">{student.name}</h3>
                            <p className="text-sm text-blue-600">Roll: {student.roll}</p>
                          </div>
                          <div className="text-sm text-blue-700 bg-blue-50 px-3 py-1 rounded-full border border-blue-200">
                            {student.time}
                          </div>
                        </div>
                        
                        <div className="flex gap-2">
                          {['present', 'late', 'absent'].map((status) => (
                            <button
                              key={status}
                              onClick={() => updateAttendance(student.id, status)}
                              disabled={saving}
                              className={`flex-1 py-2 px-3 rounded-lg border transition-all duration-300 font-medium text-sm capitalize ${getStatusButtonColor(currentStatus, status)} ${saving ? 'opacity-50 cursor-not-allowed' : ''}`}
                            >
                              {status}
                            </button>
                          ))}
                        </div>
                        
                        <div className="mt-3">
                          <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(currentStatus)} transition-all duration-300`}>
                            Current: {currentStatus}
                          </span>
                        </div>
                      </div>
                    );
                  })
                )}
              </div>
            </div>
          </div>

          {/* Right Column - Sidebar */}
          <div className="space-y-6">
            {/* Attendance Rate */}
            <div className="bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl">
              <h3 className="text-lg font-semibold text-blue-800 mb-4">Attendance Rate</h3>
              <div className="text-center">
                <div className="relative inline-block">
                  <svg className="w-32 h-32 transform transition-all duration-500 hover:scale-105">
                    <circle
                      cx="64"
                      cy="64"
                      r="54"
                      stroke="#e2e8f0"
                      strokeWidth="8"
                      fill="none"
                    />
                    <circle
                      cx="64"
                      cy="64"
                      r="54"
                      stroke="#3b82f6"
                      strokeWidth="8"
                      fill="none"
                      strokeDasharray="339.292"
                      strokeDashoffset={339.292 * (1 - attendanceRate / 100)}
                      strokeLinecap="round"
                      transform="rotate(-90 64 64)"
                      className="transition-all duration-1000 ease-out"
                    />
                  </svg>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-3xl font-bold text-blue-700">{attendanceRate}%</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Calendar */}
            <div className="bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-blue-800">Calendar</h3>
                <div className="flex gap-2">
                  <button
                    onClick={() => navigateMonth(-1)}
                    className="p-2 hover:bg-blue-50 rounded-lg transition-colors duration-200"
                  >
                    â€¹
                  </button>
                  <button
                    onClick={() => navigateMonth(1)}
                    className="p-2 hover:bg-blue-50 rounded-lg transition-colors duration-200"
                  >
                    â€º
                  </button>
                </div>
              </div>
              
              <p className="text-sm text-blue-600 mb-4">Select date to view/mark attendance</p>
              
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-200 mb-4">
                <h4 className="font-semibold text-blue-800 text-center mb-3">
                  {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                </h4>
                
                <div className="grid grid-cols-7 gap-1 text-center text-sm mb-2">
                  {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => (
                    <div key={day} className="text-blue-600 font-medium py-1 text-xs">{day}</div>
                  ))}
                </div>
                
                <div className="grid grid-cols-7 gap-1 text-center text-sm">
                  {calendarDays.map((day, index) => {
                    const isSelected = day.date.toDateString() === selectedDate.toDateString();
                    const attendanceStatus = getDayAttendanceStatus(day.date);
                    
                    return (
                      <button
                        key={index}
                        onClick={() => handleDateSelect(day.date)}
                        className={`
                          py-2 rounded-lg transition-all duration-200 transform hover:scale-110
                          ${!day.isCurrentMonth ? 'text-blue-300' : 'text-blue-900'}
                          ${day.isToday && !isSelected ? 'bg-blue-100 border border-blue-300' : ''}
                          ${isSelected ? 'bg-blue-600 text-white scale-105' : ''}
                          ${!day.isCurrentMonth ? 'cursor-not-allowed' : 'cursor-pointer hover:bg-blue-200'}
                          relative
                        `}
                        disabled={!day.isCurrentMonth}
                      >
                        {day.date.getDate()}
                        
                        {/* Attendance indicator dot */}
                        {attendanceStatus && day.isCurrentMonth && (
                          <div className={`absolute bottom-1 left-1/2 transform -translate-x-1/2 w-1 h-1 rounded-full ${
                            attendanceStatus === 'all-present' ? 'bg-green-500' :
                            attendanceStatus === 'all-absent' ? 'bg-red-500' :
                            'bg-yellow-500'
                          }`} />
                        )}
                      </button>
                    );
                  })}
                </div>
              </div>
              
              <div className="text-xs text-blue-600 space-y-1">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span>All Present</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                  <span>Some Absent/Late</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                  <span>All Absent</span>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-xl shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl">
              <h3 className="text-lg font-semibold text-blue-800 mb-4">Quick Actions</h3>
              <div className="space-y-3">
                <button
                  onClick={markAllPresent}
                  disabled={saving || students.length === 0}
                  className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transform transition-all duration-300 hover:scale-105 font-medium flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span>âœ“</span>
                  {saving ? 'Saving...' : 'Mark All Present'}
                </button>
                <button
                  onClick={generateReport}
                  disabled={generatingReport || students.length === 0}
                  className="w-full bg-blue-500 text-white py-3 px-4 rounded-lg hover:bg-blue-600 transform transition-all duration-300 hover:scale-105 font-medium flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span>ðŸ“Š</span>
                  {generatingReport ? 'Generating...' : 'Generate Report'}
                </button>
                <button 
                  onClick={generateDetailedReport}
                  disabled={generatingReport}
                  className="w-full bg-purple-500 text-white py-3 px-4 rounded-lg hover:bg-purple-600 transform transition-all duration-300 hover:scale-105 font-medium flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span>ðŸ“ˆ</span>
                  {generatingReport ? 'Generating...' : 'Detailed Report'}
                </button>
                <button className="w-full bg-blue-400 text-white py-3 px-4 rounded-lg hover:bg-blue-500 transform transition-all duration-300 hover:scale-105 font-medium flex items-center justify-center gap-2">
                  <span>ðŸ“±</span>
                  Send SMS to Parents
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Attendance History Modal */}
      {showHistory && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
          {/* Backdrop with blur effect */}
          <div 
            className="absolute inset-0 bg-black bg-opacity-50 backdrop-blur-sm transition-all duration-300"
            onClick={() => setShowHistory(false)}
          />
          
          {/* Modal Content */}
          <div className="relative bg-white/90 backdrop-blur-lg rounded-2xl shadow-2xl w-full max-w-4xl max-h-[80vh] overflow-hidden transform transition-all duration-300 scale-100">
            {/* Header */}
            <div className="bg-blue-600 text-white p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <span className="text-2xl">ðŸ“Š</span>
                  <div>
                    <h2 className="text-2xl font-bold">Attendance History</h2>
                    <p className="text-blue-100">
                      {classes.find(c => c.id == selectedClass) && formatClassName(classes.find(c => c.id == selectedClass))} - Last 7 Days
                    </p>
                  </div>
                </div>
                <button
                  onClick={() => setShowHistory(false)}
                  className="text-white hover:text-blue-200 text-2xl transition-colors duration-200"
                >
                  âœ•
                </button>
              </div>
            </div>
            
            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[60vh]">
              {historyLoading ? (
                <div className="text-center py-8">
                  <div className="text-blue-600 text-lg">Loading attendance history...</div>
                </div>
              ) : classAttendanceHistory.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  No attendance records found for the last 7 days.
                </div>
              ) : (
                <div className="space-y-4">
                  {classAttendanceHistory.map(({ date, data }) => (
                    <div key={date} className="bg-white/80 backdrop-blur-sm rounded-lg border border-blue-100 p-4">
                      <div className="flex items-center justify-between mb-3">
                        <h3 className="font-semibold text-blue-800">
                          {new Date(date).toLocaleDateString('en-US', { 
                            weekday: 'long',
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          })}
                        </h3>
                        <div className="flex gap-2 text-sm">
                          <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full">
                            Present: {data.filter(record => record.status === 'PRESENT').length}
                          </span>
                          <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full">
                            Late: {data.filter(record => record.status === 'LATE').length}
                          </span>
                          <span className="bg-red-100 text-red-800 px-2 py-1 rounded-full">
                            Absent: {data.filter(record => record.status === 'ABSENT').length}
                          </span>
                        </div>
                      </div>
                      
                      {data.length === 0 ? (
                        <p className="text-gray-500 text-sm">No attendance recorded</p>
                      ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                          {data.slice(0, 6).map(record => (
                            <div key={record.id} className="flex items-center justify-between p-2 bg-blue-50 rounded">
                              <span className="text-sm font-medium text-blue-900">
                                {record.studentName}
                              </span>
                              <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                                record.status === 'PRESENT' ? 'bg-green-100 text-green-800' :
                                record.status === 'LATE' ? 'bg-yellow-100 text-yellow-800' :
                                'bg-red-100 text-red-800'
                              }`}>
                                {record.status.toLowerCase()}
                              </span>
                            </div>
                          ))}
                          {data.length > 6 && (
                            <div className="col-span-2 text-center text-blue-600 text-sm">
                              + {data.length - 6} more students
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            {/* Footer */}
            <div className="bg-blue-50/80 backdrop-blur-sm p-4 border-t border-blue-200">
              <div className="flex justify-end">
                <button
                  onClick={() => setShowHistory(false)}
                  className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AttendancePage;